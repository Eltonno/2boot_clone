2boots
------

This is a proof-of-concept dual bootloader for Atmel AVR atmega chips.
It combines a serial bootloader and a mmc/sd card based one in the 
same 2kb of flash memory that is normally used by the arduino serial 
loader alone.

You might ask Why? Well, I have quite a few arduino "in the field". 
I can simply drag a .hex file to an SD card, insert it in an SD shield,
and field-upgrade my boards without additional hardware. At the same time, 
I can connect the serial port and start developping with the normal Arduino 
IDE.

Features:
* Uses just 2kb of flash, so it fits into the normal boot block of most atmegas
* Serial bootloader is arduino compatible (avrdude / stk500v1)
* MMC bootloader can read directly a *.hex file from an SD/MMC card
* Supported are FAT16 formatted cards up to 2GB in size (no SDHC yet)
* All of ladyada's fixes to the original bootloader are included
 

How to build
------------
On Linux, simply install avr-gcc, lib-avr and avrdude, then run:

# make

This should build 2boots for all supported boards, you can find the .hex
files in the ./build subfolder

Which .hex the right one for my board?
--------------------------------------
The .hex files are named after the following sheme:

2boot-BOARDNAME-MCU-FREQ-PIN.hex

where PIN denotes the MMC/SD Chip select line to use.

2boots-arduino-atmega328p-16000000L-PD4.hex:
 - Arduino ETH
 - Arduino with atemga328 (i.e. Uno) plus Ethernet Shield 

2boots-arduino-atmega168-1600000L-PD4.hex for
 - Arduino with atmega168 (i.e.) plus Ethernet Shield

2boots-arduno-atmega328p-8000000L-PD4.hex:
 - Arduino Pro 3.3V (w atmega328p) plus Ethernt Shield



How to flash
------------
Connect your board to your ISP programmer of choice,
Adapt the setting for avrdude in the flash.sh script (ISPTOOL, ISPPORT, ISPSPEED), 
then, run:

# sudo ./flash.sh build/2boots-arduino-atmega328p-16000000L-PD4.hex


How does the MMC/SD stuff work?
-------------------------------

The MMC/SD bootloader is disabled by default. If you want to enable it, 
you will have to name your board. For this, simply load the included 
Sketch "NameBoardSketch.pde", change the name you want to assign to
the board and the run the sketch.

The Sketch simply writes that name to the end of the EEPROM, in inverse order.

If the bootloader finds a name in the EERPOM, it will init the SPI hardware, 
search for an MMC / SD card and then look for a file that starts with
board name, and ends in HEX.

If your board is named "SAMPLE", then a file SAMPLE.hex would work, as
would SAMPLE001.hex etc...

If no file was found, the bootloader will revert to the serial method.

This allows you to have different firmware for different board on the same
SD card. It also means that the bootloader will only use the SPI lines
on boards that are named.

Where can I find the .hex file in the Arduino IDE ?
---------------------------------------------------

It used to be in the applet folder. This changed with arduino-0018
Have a look at this thread:
http://www.arduino.cc/cgi-bin/yabb2/YaBB.pl?num=1268011960
